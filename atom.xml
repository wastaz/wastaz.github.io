<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Freds blog about nerdy stuff]]></title>
  <link href="http://wastaz.github.io/atom.xml" rel="self"/>
  <link href="http://wastaz.github.io/"/>
  <updated>2014-07-18T16:28:03+02:00</updated>
  <id>http://wastaz.github.io/</id>
  <author>
    <name><![CDATA[Fred]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Magic 2015: Duels of the Product manager]]></title>
    <link href="http://wastaz.github.io/blog/2014/07/18/magic-2015-duels-of-the-product-manager/"/>
    <updated>2014-07-18T15:28:46+02:00</updated>
    <id>http://wastaz.github.io/blog/2014/07/18/magic-2015-duels-of-the-product-manager</id>
    <content type="html"><![CDATA[<p><img class="img--left" src="http://wastaz.github.io/images/Magic_2015_small.jpg" width="200" height="277">
So, <a href="http://store.steampowered.com/app/255420/">Magic 2015: Duels of the Planeswalker</a> is finally out for Steam. I&rsquo;ve been playing this series for a while and while the games have always felt solid they&rsquo;ve always been missing that one thing that keeps me loving this kind of games. Deck building.</p>

<p>So imagine my surprise and joy when it was announced that Magic 2015 would include deck building! Hooray! The holy grail is finally here!</p>

<p>Except..it&rsquo;s not.</p>

<!--more-->


<p>The problem is the in-app purchases. When I pre-ordered I realized that there was this thing called &ldquo;card collections&rdquo; which you could buy as in-app purchases (or if you bought the ultimate edition you got all of them included). After some googling I found out that this is just a new version of the deck unlocks from the ealier planeswalker games. You could earn these cards while playing the game, or you could pay money up front to unlock everything without playing the game. Since I actually like having a sense of progression in my gaming I opted to not buy any of these card collections &ndash; but the idea of them being there didn&rsquo;t bother me. I actually like this type of in-app purchases, you really only buy time &ndash; nothing else.</p>

<p>However, when I finally got my hands on the game and started playing it the game was very quick to point out to me that I&rsquo;d gotten a &ldquo;free premium booster&rdquo;, something that was apparently a very big deal. And then it finally clicked.</p>

<p>Magic 2015 has several card collections, 5 of them match planes that you can go to in game (Ravnica, Innistrad, Theros, Shandalar, Zendikar)&hellip;but the final one is just named &ldquo;Premium&rdquo;, and this is the huge problem with this game.</p>

<p>See, the 5 world-themed collections are all unlockable by playing the game. Sure, to unlock everything you&rsquo;ll have to grind and replay some content &ndash; but that&rsquo;s all right in my opinion. But the Premium collection is only obtainable by buying boosters &ndash; and there&rsquo;s no collection unlocking option for the premium collection. Also, the premium collection contains several very high-powered cards that I suspect will actually make a difference if you want to play this game in multiplayer.</p>

<p>This is the worst way to do in-app purchases and Wizards really should have known this. Their earlier travels into the world of in-app purchases has all been pretty decent, mainly time-unlocks and vanity-unlocks. But this time they&rsquo;ve stepped over the line where they actually sell power-unlocks.</p>

<p>My recommendation to you is that you don&rsquo;t buy this game. Please don&rsquo;t do it. I don&rsquo;t think I can return my game now since Steam is a bit iffy with returns&hellip;but please don&rsquo;t give them your money. And if you do decide to buy this game, please don&rsquo;t buy these Premium boosters. Don&rsquo;t give Wizards any indication that this is an acceptable inclusion!</p>

<p>This whole thing reeks of a product manager who wants to &ldquo;maximize monetization&rdquo; or something like that, and I feel bad for the game devs who has to ruin their own game by including this kind of horrible anti-feature. Wizards, please get your shit together!</p>

<p>Actually. Wizards, if you are reading this. Please turn duels of the planeswalker into a game series in the spirit of the old <a href="http://en.wikipedia.org/wiki/Magic:_The_Gathering_%28MicroProse%29">Microprose Magic: The Gathering</a> game instead! That game was completely awesome and I&rsquo;d easily pay full-price for a modern version of that game with slightly improved graphics and the latest magic sets. Oh, but keep the in-app purchases out of it please.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook, Twitter and Google authentication with ServiceStack]]></title>
    <link href="http://wastaz.github.io/blog/2014/07/16/facebook/"/>
    <updated>2014-07-16T17:11:29+02:00</updated>
    <id>http://wastaz.github.io/blog/2014/07/16/facebook</id>
    <content type="html"><![CDATA[<p>So, you want to use the awesome authentication feature in <a href="http://www.servicestack.net">ServiceStack</a> to authenticate via Facebook, Twitter and/or Google? It all seems to simple when reading the ServiceStack documentation &ndash; but there are still some things that might catch you unaware.</p>

<!--more-->


<h2>Let&rsquo;s get started!</h2>

<p>Ok, so to authenticate we&rsquo;re going to need a basic service to authenticate with. I&rsquo;m going to use a very basic hello world service as my example here. My hello world service looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Authenticate]</span>
</span><span class='line'><span class="na">[Route(&quot;/hello&quot;)]</span>
</span><span class='line'><span class="na">[Route(&quot;/hello/{Name}&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Hello</span> <span class="p">:</span> <span class="n">IReturn</span><span class="p">&lt;</span><span class="n">HelloResponse</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HelloResponse</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Result</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HelloService</span> <span class="p">:</span> <span class="n">Service</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">HelloResponse</span> <span class="nf">Any</span><span class="p">(</span><span class="n">Hello</span> <span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">HelloResponse</span> <span class="p">{</span><span class="n">Result</span> <span class="p">=</span> <span class="s">&quot;Hello {0}&quot;</span><span class="p">.</span><span class="n">Fmt</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Name</span><span class="p">)};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple, eh? And of course I have an apphost which looks like this, I&rsquo;m using a local <a href="http://www.mongodb.org/">MongoDb</a> instance here, but of course you could use any authentication repository you&rsquo;d like.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AppHost</span> <span class="p">:</span> <span class="n">AppHostBase</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">AppHost</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">&quot;Hello Web Services&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="k">typeof</span><span class="p">(</span><span class="n">HelloService</span><span class="p">).</span><span class="n">Assembly</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">Funq</span><span class="p">.</span><span class="n">Container</span> <span class="n">container</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">appSettings</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AppSettings</span><span class="p">();</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">string</span> <span class="n">connectionString</span> <span class="p">=</span> <span class="s">&quot;mongodb://localhost&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">mongoClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MongoClient</span><span class="p">(</span><span class="n">connectionString</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">mongoDb</span> <span class="p">=</span> <span class="n">mongoClient</span><span class="p">.</span><span class="n">GetServer</span><span class="p">().</span><span class="n">GetDatabase</span><span class="p">(</span><span class="s">&quot;authenticationtest&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//register any dependencies your services use, e.g:</span>
</span><span class='line'>        <span class="n">container</span><span class="p">.</span><span class="n">Register</span><span class="p">&lt;</span><span class="n">ICacheClient</span><span class="p">&gt;(</span><span class="k">new</span> <span class="n">MemoryCacheClient</span><span class="p">());</span>
</span><span class='line'>        <span class="n">container</span><span class="p">.</span><span class="n">Register</span><span class="p">&lt;</span><span class="n">IAuthRepository</span><span class="p">&gt;(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">MongoDbAuthRepository</span><span class="p">(</span><span class="n">mongoDb</span><span class="p">,</span> <span class="k">true</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Plugins</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">AuthFeature</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">AuthUserSession</span><span class="p">(),</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">IAuthProvider</span><span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>                                  <span class="k">new</span> <span class="nf">FacebookAuthProvider</span><span class="p">(</span><span class="n">appSettings</span><span class="p">),</span>
</span><span class='line'>                                  <span class="k">new</span> <span class="nf">GoogleOAuth2Provider</span><span class="p">(</span><span class="n">appSettings</span><span class="p">),</span>
</span><span class='line'>                                  <span class="k">new</span> <span class="nf">TwitterAuthProvider</span><span class="p">(</span><span class="n">appSettings</span><span class="p">),</span>
</span><span class='line'>                                 <span class="p">}));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So&hellip;is this enough? No, actually not. You also need to configure the authentication providers, and this is done in the appSettings part of your web/app.config file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;appSettings&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;oauth.RedirectUrl&quot;</span>
</span><span class='line'>         <span class="na">value=</span><span class="s">&quot;http://localhost:53789/&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Should match with OAuth2&#39;s App Callback URL --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;oauth.CallbackUrl&quot;</span>
</span><span class='line'>         <span class="na">value=</span><span class="s">&quot;http://localhost:53789/auth/{0}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Create Facebook App at: https://developers.facebook.com/apps --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;oauth.facebook.Permissions&quot;</span>
</span><span class='line'>         <span class="na">value=</span><span class="s">&quot;email,public_profile&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;oauth.facebook.AppId&quot;</span>
</span><span class='line'>         <span class="na">value=</span><span class="s">&quot;YOUR_FACEBOOK_APP_ID&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;oauth.facebook.AppSecret&quot;</span>
</span><span class='line'>         <span class="na">value=</span><span class="s">&quot;YOUR_FACEBOOK_APP_SECRET&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Create Twitter App at: https://dev.twitter.com/apps --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;oauth.twitter.ConsumerKey&quot;</span>
</span><span class='line'>         <span class="na">value=</span><span class="s">&quot;YOUR_TWITTER_CONSUMER_KEY&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;oauth.twitter.ConsumerSecret&quot;</span>
</span><span class='line'>         <span class="na">value=</span><span class="s">&quot;YOUR_TWITTER_CONSUMER_SECRET&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Create Google App at: https://code.google.com/apis/console/ --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;oauth.GoogleOAuth.ConsumerKey&quot;</span>
</span><span class='line'>         <span class="na">value=</span><span class="s">&quot;YOUR_GOOGLE_OAUTH2_CONSUMER_KEY&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;oauth.GoogleOAuth.ConsumerSecret&quot;</span>
</span><span class='line'>         <span class="na">value=</span><span class="s">&quot;YOUR_GOOGLE_OAUTH2_CONSUMER_SECRET&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/appSetting&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow, that&rsquo;s a mouthful of secret codes! We&rsquo;re going to look at where we get these codes and keys later on. But for now, have a look at the first two configuration options, <code>oauth.RedirectUrl</code> and <code>oauth.CallbackUrl</code>.</p>

<p>These should point at where you want your user to be redirected to when they&rsquo;ve performed the actual authentication (which happens on facebook, twitter or google). If you want to have different places on your site that your user ends up depending on who they authenticated with you can do so by adding a configuraiton option with the name <code>oauth.PROVIDERNAME.RedirectUrl</code> or <code>oauth.PROVIDERNAME.CallbackUrl</code> if the provider is an oauth2 provider. But generally, you wouldn&rsquo;t want this. So by omitting the providername you are setting the default fallbackvalue for all providers.</p>

<p>But where do you get these codes? Well, that&rsquo;s pretty easy. You follow these links and register your app</p>

<ul>
<li><a href="https://developers.facebook.com/apps">Facebook</a></li>
<li><a href="https://dev.twitter.com/apps">Twitter</a></li>
<li><a href="https://code.google.com/apis/console/">Google</a></li>
</ul>


<h3>Facebook</h3>

<p>For facebook, you must register as a developer and then you must create a new app. Creating a new app is done under the Apps menu on top.
After you&rsquo;ve done this, you&rsquo;ll get your app id and app secret and you can put them in your config file.</p>

<p>But wait! It doesn&rsquo;t work just yet!</p>

<p><img class="center" src="http://wastaz.github.io/images/facebook_auth_error.png"></p>

<p>Damn that facebook! Always standing in the way of our authentication heaven!
The problem here is that we have not yet told facebook about our website. If we go to the settings panel and click the <em>Add Platform</em> button and add our website, then everything will work perfectly.</p>

<p><img class="center" src="http://wastaz.github.io/images/facebook_auth.png"></p>

<p>I&rsquo;m using localhost:53789 here because that&rsquo;s where I run my development server. If you&rsquo;re using this in production you should of course put in your real website address here :)</p>

<h3>Twitter</h3>

<p>For twitter, you&rsquo;ll have to &ldquo;create a new app&rdquo;. This is pretty straightforward except for one thing. If you&rsquo;re doing this on your non-production machine and want to type in <code>localhost</code> as your website&hellip;don&rsquo;t!</p>

<p>If you do, you&rsquo;ll get this fantastic error message which tells you all about what is wrong and how to fix it.</p>

<p><img class="center" src="http://wastaz.github.io/images/twitter_auth_error.png"></p>

<p>What&rsquo;s that you say? It doesn&rsquo;t tell you anything at all about how to fix it? Yea&hellip;that&rsquo;s what I thought as well when I got this error message. However, Stack Overflow was kind enough to tell me that what it really means is that you may not put in <code>localhost</code> as your website. If you want to do that, you&rsquo;ll have to put in <code>127.0.0.1</code> instead. If you do that, everything works! Just go to the API Keys area once you&rsquo;ve managed to create your application and get your API key and API secret and you&rsquo;re on your way to greatness!</p>

<h3>Google</h3>

<p><em>Please remember that servicestack is using dotnetopenauth for the google authentication, this code wants to run in an ASP.NET environment, so if you try to run this self-hosted you&rsquo;ll most likely run into problems. If you&rsquo;re running self-hosted, you may want to skip Google OAuth2.</em></p>

<p>Create or log in to your developer account and go to the credentials section. What you want to do is to create a new client id. As a web application you&rsquo;ll need to put in your authorized javascript origins (localhost is fine here), and your authorized redirect uri. You will want to put your callback url as the authorized redirect uri &ndash; however you should be aware of that you need to actually put in the full redirect uri here. So for my example I would put <code>http://localhost:53789/auth/GoogleOAuth</code> since that is the actual url of the servicestack handler for google oauth.</p>

<p>Once you&rsquo;ve created your client ID you&rsquo;ll get a client secret (this is you api secret) and a client id (this is your api key). Just plug the, in to your configuration and you should be all set!</p>

<h2>That&rsquo;s it?</h2>

<p>Yea, that&rsquo;s really it. The user can now authenticate via facebook, twitter or google by hitting the correct authentication endpoint (<code>/auth/twitter</code>, <code>/auth/facebook</code>, <code>/auth/GoogleOAuth</code>) and the user information will be available in the session unless you hook into the authentication flow and do something else with it before. But more about that some other time!</p>

<p>Now that you have authentication in place, go forth and write code that actually does something. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A new hope]]></title>
    <link href="http://wastaz.github.io/blog/2014/07/16/a-new-hope/"/>
    <updated>2014-07-16T14:01:05+02:00</updated>
    <id>http://wastaz.github.io/blog/2014/07/16/a-new-hope</id>
    <content type="html"><![CDATA[<p>So I&rsquo;ve decided to take up blogging&hellip;</p>

<!--more-->


<p>I hope that in a year I&rsquo;ll look back to this post and think &ldquo;Oh my god! Why did I ever start out with one of those silly <em>I hope I&rsquo;ll still be doing this in a year</em>-posts&rdquo;. But who knows what happens between now and then.</p>

<p>Welcome, I guess.</p>
]]></content>
  </entry>
  
</feed>
